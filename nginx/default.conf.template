# nginx/default.conf.template

server {
    listen 80;
    server_name _;  # Replace with your actual domain

    # Add cache control headers for entire server
    add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
    add_header Pragma "no-cache";
    add_header Expires "0";
    
    # --- Serve Static Frontend ---
    location /projection/ {
        alias /usr/share/nginx/html/nur-projection/frontend/;
        index index.html;
        try_files $uri $uri/ /nur-projection/frontend/index.html;
        
        # Disable cache for HTML files
        location ~* \.(?:html)$ {
            add_header Cache-Control "no-store, no-cache, must-revalidate";
            expires -1;
        }
    }

    # Dashboard application with client-side routing
    location /dashboard/ {
        alias /usr/share/nginx/html/nur-front/frontend/;
        index index.html;
        # The key fix: all routes like /dashboard/mobility, /dashboard/climate, etc.
        # should serve the React app's index.html to support client-side routing
        try_files $uri $uri/ /usr/share/nginx/html/nur-front/frontend/index.html;
        
        # Disable cache for HTML files
        location ~* \.(?:html)$ {
            add_header Cache-Control "no-store, no-cache, must-revalidate";
            expires -1;
        }
    }

    # Redirect /dashboard without trailing slash to /dashboard/
    location = /dashboard {
        return 301 /dashboard/;
    }

    # Remote controller
    location /remote-controller/ {
        alias /usr/share/nginx/html/nur-remote-controller/frontend/;
        index index.html;
        try_files $uri $uri/ /nur-remote-controller/frontend/index.html;
        
        # Disable cache for HTML files
        location ~* \.(?:html)$ {
            add_header Cache-Control "no-store, no-cache, must-revalidate";
            expires -1;
        }
    }

    # Redirect /remote/ to /remote-controller/
    location = /remote {
        return 301 /remote-controller/;
    }

    # Also redirect /remote/ with trailing slash
    location = /remote/ {
        return 301 /remote-controller/;
    }

    location /static/ {
        alias /usr/share/nginx/html/nur-front/frontend/static/;
        try_files $uri =404;
    }

    # --- Serve Logo ---
    location /media/Nur-Logo_3x-_1_.svg {
        # Try multiple locations for the logo file
        root /usr/share/nginx/html;
        try_files /nur-front/frontend/media/Nur-Logo_3x-_1_.svg 
                  /nur-front/frontend/Nur-Logo_3x-_1_.svg 
                  /media/Nur-Logo_3x-_1_.svg 
                  /nur-front/frontend/build/media/Nur-Logo_3x-_1_.svg 
                  /nur-front/frontend/build/Nur-Logo_3x-_1_.svg 
                  /nur-front/frontend/public/media/Nur-Logo_3x-_1_.svg 
                  /nur-front/frontend/public/Nur-Logo_3x-_1_.svg 
                  =404;
    }
    
    # --- Serve Media Files Directly with proper MIME types ---
    location /media/ {
        alias /usr/share/nginx/html/media/;
        # Set proper MIME types for all files
        types {
            text/html                             html htm shtml;
            text/css                              css;
            text/xml                              xml;
            image/gif                             gif;
            image/jpeg                            jpeg jpg;
            image/png                             png;
            image/svg+xml                         svg svgz;
            image/webp                            webp;
            application/javascript                js;
            application/atom+xml                  atom;
            application/rss+xml                   rss;
            application/json                      json;
            application/pdf                       pdf;
            application/zip                       zip;
            font/ttf                              ttf;
            font/woff                             woff;
            font/woff2                            woff2;
        }
        
        # Add CORS headers
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
        
        # Enable directory listing for debugging
        autoindex on;
        
        # Set proper permissions
        access_log /var/log/nginx/media_access.log;
        error_log /var/log/nginx/media_error.log;
        
        try_files $uri $uri/ =404;
    }

    # --- Reverse Proxy for Django API ---
    location /api/ {
        proxy_pass http://core_api:${API_PORT}/api/;  # Updated service name
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Allow POST methods
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}
