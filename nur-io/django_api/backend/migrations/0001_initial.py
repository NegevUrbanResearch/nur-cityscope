# Generated by Django 5.1.7 - Clean initial migration without IndicatorGeojson

import django.db.models.deletion
from django.db import migrations, models
import django.utils.timezone
import backend.models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Indicator",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("indicator_id", models.IntegerField()),
                ("name", models.CharField(max_length=100)),
                ("has_states", models.BooleanField(default=False)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("mobility", "Mobility"),
                            ("climate", "Climate"),
                            ("land_use", "Land Use"),
                        ],
                        default="mobility",
                        max_length=50,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MapType",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="State",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "state_values",
                    models.JSONField(blank=True, default=dict, null=True),
                ),
                (
                    "scenario_type",
                    models.CharField(
                        max_length=50,
                        choices=[
                            ("utci", "UTCI Map"),
                            ("plan", "Plan Map"),
                            ("general", "General"),
                        ],
                        default="general",
                        help_text="Type of visualization/scenario for climate indicators",
                    ),
                ),
                (
                    "scenario_name",
                    models.CharField(
                        max_length=100,
                        blank=True,
                        null=True,
                        help_text="Human-readable name for the scenario",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["scenario_type", "scenario_name"],
                        name="state_scenario_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="IndicatorData",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "indicator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data",
                        to="backend.indicator",
                    ),
                ),
                (
                    "state",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data",
                        to="backend.state",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LayerConfig",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("layer_config", models.JSONField(default=dict)),
                (
                    "indicatorData",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="layer_config",
                        to="backend.indicatordata",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="IndicatorImage",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("image", models.ImageField(upload_to=backend.models.indicator_image_path)),
                ("uploaded_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "indicatorData",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="backend.indicatordata",
                    ),
                ),
            ],
            options={
                "ordering": ["-uploaded_at"],
            },
        ),
        migrations.CreateModel(
            name="DashboardFeedState",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("data", models.JSONField(default=dict)),
                (
                    "dashboard_type",
                    models.CharField(
                        choices=[
                            ("mobility", "Mobility"),
                            ("climate", "Climate"),
                            ("land_use", "Land Use"),
                        ],
                        default="mobility",
                        max_length=50,
                    ),
                ),
                (
                    "state",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dashboard_feed",
                        to="backend.state",
                    ),
                ),
            ],
        ),
    ]