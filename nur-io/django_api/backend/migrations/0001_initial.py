# Generated by Django - Single migration for nur-CityScope

import django.db.models.deletion
from django.db import migrations, models
import django.utils.timezone
import backend.models


def populate_general_states(apps, schema_editor):
    """Create the general states for mobility (Present/Survey)"""
    State = apps.get_model("backend", "State")

    # General states for mobility
    general_states = [
        {"scenario": "present", "label": "Present", "year": 2023},
        {"scenario": "survey", "label": "Survey", "year": 2023},
    ]

    # Create general states
    for state_data in general_states:
        State.objects.get_or_create(
            scenario_type="general",
            scenario_name=state_data["scenario"],
            defaults={"state_values": state_data},
        )

    print(f"✓ Created {len(general_states)} general states")


def populate_climate_scenarios(apps, schema_editor):
    """Create the 14 climate scenario states (7 scenarios × 2 types)"""
    State = apps.get_model("backend", "State")

    # Climate scenario definitions
    scenarios = {
        "dense_highrise": "Dense Highrise",
        "existing": "Existing",
        "high_rises": "High Rises",
        "lowrise": "Low Rise Dense",
        "mass_tree_planting": "Mass Tree Planting",
        "open_public_space": "Open Public Space",
        "placemaking": "Placemaking",
    }

    # Create UTCI and Plan states for each scenario
    for scenario_key, display_name in scenarios.items():
        # Create UTCI state
        State.objects.get_or_create(
            scenario_type="utci",
            scenario_name=scenario_key,
            defaults={
                "state_values": {
                    "scenario": scenario_key,
                    "type": "utci",
                    "label": f"{display_name} - UTCI",
                }
            },
        )

        # Create Plan state
        State.objects.get_or_create(
            scenario_type="plan",
            scenario_name=scenario_key,
            defaults={
                "state_values": {
                    "scenario": scenario_key,
                    "type": "plan",
                    "label": f"{display_name} - Plan",
                }
            },
        )

    print(f"✓ Created {len(scenarios) * 2} climate scenario states")


def reverse_general_states(apps, schema_editor):
    """Remove general states"""
    State = apps.get_model("backend", "State")
    State.objects.filter(scenario_type="general").delete()


def reverse_climate_scenarios(apps, schema_editor):
    """Remove climate scenario states"""
    State = apps.get_model("backend", "State")
    State.objects.filter(scenario_type__in=["utci", "plan"]).delete()


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Indicator",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("indicator_id", models.IntegerField()),
                ("name", models.CharField(max_length=100)),
                ("has_states", models.BooleanField(default=False)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("mobility", "Mobility"),
                            ("climate", "Climate"),
                        ],
                        default="mobility",
                        max_length=50,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MapType",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="State",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "state_values",
                    models.JSONField(blank=True, default=dict, null=True),
                ),
                (
                    "scenario_type",
                    models.CharField(
                        max_length=50,
                        choices=[
                            ("utci", "UTCI Map"),
                            ("plan", "Plan Map"),
                            ("general", "General"),
                        ],
                        default="general",
                        help_text="Type of visualization/scenario for climate indicators",
                    ),
                ),
                (
                    "scenario_name",
                    models.CharField(
                        max_length=100,
                        blank=True,
                        null=True,
                        help_text="Human-readable name for the scenario",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["scenario_type", "scenario_name"],
                        name="state_scenario_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="IndicatorData",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "indicator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data",
                        to="backend.indicator",
                    ),
                ),
                (
                    "state",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data",
                        to="backend.state",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LayerConfig",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("layer_config", models.JSONField(default=dict)),
                (
                    "indicatorData",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="layer_config",
                        to="backend.indicatordata",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="IndicatorImage",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "image",
                    models.ImageField(upload_to=backend.models.indicator_image_path),
                ),
                (
                    "uploaded_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "indicatorData",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="backend.indicatordata",
                    ),
                ),
            ],
            options={
                "ordering": ["-uploaded_at"],
            },
        ),
        migrations.CreateModel(
            name="DashboardFeedState",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("data", models.JSONField(default=dict)),
                (
                    "dashboard_type",
                    models.CharField(
                        choices=[
                            ("mobility", "Mobility"),
                            ("climate", "Climate"),
                        ],
                        default="mobility",
                        max_length=50,
                    ),
                ),
                (
                    "state",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dashboard_feed",
                        to="backend.state",
                    ),
                ),
            ],
        ),
        # Populate general states after model creation
        migrations.RunPython(populate_general_states, reverse_general_states),
        # Populate climate scenarios after model creation
        migrations.RunPython(populate_climate_scenarios, reverse_climate_scenarios),
    ]
